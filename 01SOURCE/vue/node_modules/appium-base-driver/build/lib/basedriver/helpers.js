"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureApp = configureApp;
exports.isPackageOrBundle = isPackageOrBundle;
exports.getCoordDefault = getCoordDefault;
exports.getSwipeTouchDuration = getSwipeTouchDuration;
exports.renameKey = renameKey;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _logger = _interopRequireDefault(require("./logger"));

var _fs2 = _interopRequireDefault(require("fs"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _request = _interopRequireDefault(require("request"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

const ZIP_EXTS = ['.zip', '.ipa'];
const ZIP_MIME_TYPES = ['application/zip', 'application/x-zip-compressed', 'multipart/x-zip'];
const APPLICATIONS_CACHE = new _lruCache.default({
  max: 100
});
const APPLICATIONS_CACHE_GUARD = new _asyncLock.default();

function retrieveHeaders(_x) {
  return _retrieveHeaders.apply(this, arguments);
}

function _retrieveHeaders() {
  _retrieveHeaders = (0, _asyncToGenerator2.default)(function* (link) {
    try {
      const response = yield (0, _requestPromise.default)({
        url: link,
        method: 'HEAD',
        resolveWithFullResponse: true,
        timeout: 5000
      });
      return response.headers;
    } catch (e) {
      _logger.default.debug(`Cannot send HEAD request to '${link}'. Original error: ${e.message}`);
    }

    return {};
  });
  return _retrieveHeaders.apply(this, arguments);
}

function getCachedApplicationPath(link, currentModified) {
  if (!APPLICATIONS_CACHE.has(link) || !currentModified) {
    return null;
  }

  const _APPLICATIONS_CACHE$g = APPLICATIONS_CACHE.get(link),
        lastModified = _APPLICATIONS_CACHE$g.lastModified,
        fullPath = _APPLICATIONS_CACHE$g.fullPath;

  if (lastModified && currentModified.getTime() <= lastModified.getTime()) {
    _logger.default.debug(`Reusing already downloaded application at '${fullPath}'`);

    return fullPath;
  }

  _logger.default.debug(`'Last-Modified' timestamp of '${link}' has been updated. ` + `An updated copy of the application is going to be downloaded.`);

  return null;
}

function verifyAppExtension(app, supportedAppExtensions) {
  if (supportedAppExtensions.includes(_path.default.extname(app))) {
    return app;
  }

  throw new Error(`New app path '${app}' did not have extension(s) '${supportedAppExtensions}'`);
}

function configureApp(_x2, _x3) {
  return _configureApp.apply(this, arguments);
}

function _configureApp() {
  _configureApp = (0, _asyncToGenerator2.default)(function* (app, supportedAppExtensions) {
    if (!_lodash.default.isString(app)) {
      return;
    }

    if (!_lodash.default.isArray(supportedAppExtensions)) {
      supportedAppExtensions = [supportedAppExtensions];
    }

    let newApp = app;
    let shouldUnzipApp = false;
    let archiveHash = null;
    let currentModified = null;

    const _url$parse = _url.default.parse(newApp),
          protocol = _url$parse.protocol;

    const isUrl = ['http:', 'https:'].includes(protocol);
    return yield APPLICATIONS_CACHE_GUARD.acquire(app, (0, _asyncToGenerator2.default)(function* () {
      if (isUrl) {
        _logger.default.info(`Using downloadable app '${newApp}'`);

        const headers = yield retrieveHeaders(newApp);

        if (headers['last-modified']) {
          _logger.default.debug(`Last-Modified: ${headers['last-modified']}`);

          currentModified = new Date(headers['last-modified']);
        }

        const cachedPath = getCachedApplicationPath(app, currentModified);

        if (cachedPath) {
          if (yield _appiumSupport.fs.exists(cachedPath)) {
            _logger.default.info(`Reusing the previously downloaded application at '${cachedPath}'`);

            return verifyAppExtension(cachedPath, supportedAppExtensions);
          }

          _logger.default.info(`The application at '${cachedPath}' does not exist anymore. Deleting it from the cache`);

          APPLICATIONS_CACHE.del(app);
        }

        let fileName = `appium-app${_lodash.default.first(supportedAppExtensions)}`;

        if (headers['content-type']) {
          _logger.default.debug(`Content-Type: ${headers['content-type']}`);

          if (ZIP_MIME_TYPES.includes(headers['content-type'])) {
            fileName = 'appium-app.zip';
            shouldUnzipApp = true;
          }
        }

        if (headers['content-disposition'] && /^attachment/i.test(headers['content-disposition'])) {
          const match = /filename="([^"]+)/i.exec(headers['content-disposition']);

          if (match) {
            _logger.default.debug(`Parsed file name '${match[1]}' from 'Content-Disposition' header`);

            fileName = (0, _sanitizeFilename.default)(match[1], {
              replacement: '-'
            });
            shouldUnzipApp = shouldUnzipApp || ZIP_EXTS.includes(_path.default.extname(fileName));
          }
        }

        const targetPath = yield _appiumSupport.tempDir.path({
          prefix: fileName,
          suffix: ''
        });
        newApp = yield downloadApp(newApp, targetPath);
      } else if (yield _appiumSupport.fs.exists(newApp)) {
        _logger.default.info(`Using local app '${newApp}'`);

        shouldUnzipApp = ZIP_EXTS.includes(_path.default.extname(newApp));
      } else {
        let errorMessage = `The application at '${newApp}' does not exist or is not accessible`;

        if (_lodash.default.isString(protocol) && protocol.length > 2) {
          errorMessage = `The protocol '${protocol}' used in '${newApp}' is not supported. ` + `Only http: and https: protocols are supported`;
        }

        throw new Error(errorMessage);
      }

      if (shouldUnzipApp) {
        const archivePath = newApp;
        archiveHash = yield _appiumSupport.fs.hash(archivePath);

        if (APPLICATIONS_CACHE.has(app) && archiveHash === APPLICATIONS_CACHE.get(app).hash) {
          const _APPLICATIONS_CACHE$g2 = APPLICATIONS_CACHE.get(app),
                fullPath = _APPLICATIONS_CACHE$g2.fullPath;

          if (yield _appiumSupport.fs.exists(fullPath)) {
            if (archivePath !== app) {
              yield _appiumSupport.fs.rimraf(archivePath);
            }

            _logger.default.info(`Will reuse previously cached application at '${fullPath}'`);

            return verifyAppExtension(fullPath, supportedAppExtensions);
          }

          _logger.default.info(`The application at '${fullPath}' does not exist anymore. Deleting it from the cache`);

          APPLICATIONS_CACHE.del(app);
        }

        const tmpRoot = yield _appiumSupport.tempDir.openDir();

        try {
          newApp = yield unzipApp(archivePath, tmpRoot, supportedAppExtensions);
        } finally {
          if (newApp !== archivePath && archivePath !== app) {
            yield _appiumSupport.fs.rimraf(archivePath);
          }
        }

        _logger.default.info(`Unzipped local app to '${newApp}'`);
      } else if (!_path.default.isAbsolute(newApp)) {
        newApp = _path.default.resolve(process.cwd(), newApp);

        _logger.default.warn(`The current application path '${app}' is relative, ` + `which might cause further issues. The path has been rewritten to '${newApp}' ` + `in order to avoid them`);
      }

      verifyAppExtension(newApp, supportedAppExtensions);

      if (app !== newApp && (archiveHash || currentModified)) {
        APPLICATIONS_CACHE.set(app, {
          hash: archiveHash,
          lastModified: currentModified,
          fullPath: newApp
        });
      }

      return newApp;
    }));
  });
  return _configureApp.apply(this, arguments);
}

function downloadApp(_x4, _x5) {
  return _downloadApp.apply(this, arguments);
}

function _downloadApp() {
  _downloadApp = (0, _asyncToGenerator2.default)(function* (app, targetPath) {
    let appUrl;

    try {
      appUrl = _url.default.parse(app);
    } catch (err) {
      throw new Error(`Invalid App URL (${app})`);
    }

    try {
      const started = process.hrtime();
      yield new _bluebird.default((resolve, reject) => {
        (0, _request.default)(appUrl.href).on('error', reject).on('response', res => {
          if (res.statusCode >= 400) {
            return reject(`Error downloading file: ${res.statusCode}`);
          }
        }).pipe(_fs2.default.createWriteStream(targetPath)).on('close', resolve);
      });

      const _process$hrtime = process.hrtime(started),
            _process$hrtime2 = (0, _slicedToArray2.default)(_process$hrtime, 2),
            seconds = _process$hrtime2[0],
            ns = _process$hrtime2[1];

      const secondsElapsed = seconds + ns / 1E09;

      const _ref2 = yield _appiumSupport.fs.stat(targetPath),
            size = _ref2.size;

      _logger.default.debug(`'${appUrl.href}' (${_appiumSupport.util.toReadableSizeString(size)}) ` + `has been downloaded to '${targetPath}' in ${secondsElapsed.toFixed(3)}s`);

      if (secondsElapsed >= 2) {
        const bytesPerSec = Math.floor(size / secondsElapsed);

        _logger.default.debug(`Approximate download speed: ${_appiumSupport.util.toReadableSizeString(bytesPerSec)}/s`);
      }

      return targetPath;
    } catch (err) {
      throw new Error(`Problem downloading app from url ${appUrl.href}: ${err.message}`);
    }
  });
  return _downloadApp.apply(this, arguments);
}

function walkDir(_x6) {
  return _walkDir.apply(this, arguments);
}

function _walkDir() {
  _walkDir = (0, _asyncToGenerator2.default)(function* (dir) {
    const result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (yield _appiumSupport.fs.readdir(dir))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const name = _step.value;

        const currentPath = _path.default.join(dir, name);

        result.push(currentPath);

        if ((yield _appiumSupport.fs.stat(currentPath)).isDirectory()) {
          result.push(...(yield walkDir(currentPath)));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  });
  return _walkDir.apply(this, arguments);
}

function unzipApp(_x7, _x8, _x9) {
  return _unzipApp.apply(this, arguments);
}

function _unzipApp() {
  _unzipApp = (0, _asyncToGenerator2.default)(function* (zipPath, dstRoot, supportedAppExtensions) {
    yield _appiumSupport.zip.assertValidZip(zipPath);

    if (!_lodash.default.isArray(supportedAppExtensions)) {
      supportedAppExtensions = [supportedAppExtensions];
    }

    const tmpRoot = yield _appiumSupport.tempDir.openDir();

    try {
      _logger.default.debug(`Unzipping '${zipPath}'`);

      yield _appiumSupport.zip.extractAllTo(zipPath, tmpRoot);
      const allExtractedItems = yield walkDir(tmpRoot);

      _logger.default.debug(`Extracted ${allExtractedItems.length} item(s) from '${zipPath}'`);

      const isSupportedAppItem = relativePath => supportedAppExtensions.includes(_path.default.extname(relativePath)) || _lodash.default.some(supportedAppExtensions, x => relativePath.includes(`${x}${_path.default.sep}`));

      const itemsToKeep = allExtractedItems.map(itemPath => _path.default.relative(tmpRoot, itemPath)).filter(relativePath => isSupportedAppItem(relativePath)).map(relativePath => _path.default.resolve(tmpRoot, relativePath));

      const itemsToRemove = _lodash.default.difference(allExtractedItems, itemsToKeep).filter(itemToRemovePath => !_lodash.default.some(itemsToKeep, itemToKeepPath => itemToKeepPath.startsWith(itemToRemovePath)));

      yield _bluebird.default.all(itemsToRemove, function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* (itemPath) {
          if (yield _appiumSupport.fs.exists(itemPath)) {
            yield _appiumSupport.fs.rimraf(itemPath);
          }
        });

        return function (_x10) {
          return _ref3.apply(this, arguments);
        };
      }());
      const allBundleItems = (yield walkDir(tmpRoot)).map(itemPath => _path.default.relative(tmpRoot, itemPath)).filter(relativePath => isSupportedAppItem(relativePath)).sort((a, b) => a.split(_path.default.sep).length - b.split(_path.default.sep).length);

      if (_lodash.default.isEmpty(allBundleItems)) {
        throw new Error(`App zip unzipped OK, but we could not find ${supportedAppExtensions} bundle(s) ` + `in it. Make sure your archive contains ${supportedAppExtensions} package(s) ` + `and nothing else`);
      }

      const matchedBundle = _lodash.default.first(allBundleItems);

      _logger.default.debug(`Matched ${allBundleItems.length} item(s) in the extracted archive. ` + `Assuming '${matchedBundle}' is the correct bundle`);

      yield _appiumSupport.fs.mv(_path.default.resolve(tmpRoot, matchedBundle), _path.default.resolve(dstRoot, matchedBundle), {
        mkdirp: true
      });
      return _path.default.resolve(dstRoot, matchedBundle);
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }
  });
  return _unzipApp.apply(this, arguments);
}

function isPackageOrBundle(app) {
  return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
}

function getCoordDefault(val) {
  return _appiumSupport.util.hasValue(val) ? val : 0.5;
}

function getSwipeTouchDuration(waitGesture) {
  let duration = 0.8;

  if (typeof waitGesture.options.ms !== 'undefined' && waitGesture.options.ms) {
    duration = waitGesture.options.ms / 1000;

    if (duration === 0) {
      duration = 0.1;
    }
  }

  return duration;
}

function renameKey(input, inKey, outKey) {
  if (_lodash.default.isArray(input)) {
    return input.map(item => renameKey(item, inKey, outKey));
  } else if (_lodash.default.isPlainObject(input)) {
    return _lodash.default.reduce(input, (resultObj, value, key) => (0, _objectSpread2.default)({}, resultObj, {
      [key === inKey ? outKey : key]: renameKey(value, inKey, outKey)
    }), {});
  }

  return input;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
